/**
 * @packageDocumentation
 * @module api.functional
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection, IPropagation, HttpError } from "@nestia/fetcher";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import type { Primitive, Resolved } from "typia";
import typia from "typia";

import type { TestDto } from "../../dto/index";

/**
 * @controller AppController.getHello
 * @path GET /
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getHello(
  connection: IConnection,
): Promise<getHello.Output> {
  return !!connection.simulate
    ? getHello.simulate(connection)
    : PlainFetcher.propagate<any>(connection, {
        ...getHello.METADATA,
        template: getHello.METADATA.path,
        path: getHello.path(),
      });
}
export namespace getHello {
  export type Output = IPropagation<
    {
      200: Primitive<string>;
    },
    200
  >;

  export const METADATA = {
    method: "GET",
    path: "/",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = () => "/";
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): Resolved<Primitive<string>> => typia.random<Primitive<string>>(g);
  export const simulate = (connection: IConnection): Output => {
    return {
      success: true,
      status: 200,
      headers: {
        "Content-Type": "application/json",
      },
      data: random(
        "object" === typeof connection.simulate && null !== connection.simulate
          ? connection.simulate
          : undefined,
      ),
    } as Output;
  };
}

/**
 * @controller AppController.create
 * @path POST /
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function create(
  connection: IConnection,
  dto: create.Input,
): Promise<create.Output> {
  return !!connection.simulate
    ? create.simulate(connection, dto)
    : PlainFetcher.propagate<any, any>(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          template: create.METADATA.path,
          path: create.path(),
        },
        dto,
      );
}
export namespace create {
  export type Input = Resolved<TestDto>;
  export type Output = IPropagation<
    {
      201: Primitive<string>;
    },
    201
  >;

  export const METADATA = {
    method: "POST",
    path: "/",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 201,
  } as const;

  export const path = () => "/";
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): Resolved<Primitive<string>> => typia.random<Primitive<string>>(g);
  export const simulate = (
    connection: IConnection,
    dto: create.Input,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(dto));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return {
      success: true,
      status: 201,
      headers: {
        "Content-Type": "application/json",
      },
      data: random(
        "object" === typeof connection.simulate && null !== connection.simulate
          ? connection.simulate
          : undefined,
      ),
    } as Output;
  };
}
